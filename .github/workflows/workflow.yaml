name: "connect-dro-iot-demo"
on: 
  workflow_dispatch:
    inputs:
      app-choice:
        required: true
        type: choice
        options:
            - 'app1'
            - 'app2'
        description: "which application folder to build"
      project-key:
          required: true
          type: string
          description: "The JFrog project key"
          default: "dro"        
      docker-repo:
        required: true
        type: string
        description: "The name of the target docker repository"
        default: "dro-iot-docker-local"
jobs:
  build:
    runs-on: ubuntu-latest
    # Here we install all the tools : docker buildx, QEMU, JDK 11, JFrog CLI
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
           # JFrog platform url (for example: https://acme.jfrog.io) 
          JF_URL: https://${{ secrets.JF_HOST }}
          # JFrog Platform access token
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JFROG_CLI_BUILD_PROJECT: ${{ github.event.inputs.project-key }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: "linux/amd64,linux/arm64,linux/arm/v7"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # We build & test the JAR file, scan it and if scan result ok, we publish it to our artifactory maven repository
      - name: Login to Artifactory Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets['JF_HOST'] }}
          username: ${{ secrets['DOCKER_LOGIN'] }}
          password: ${{ secrets['DOCKER_PWD'] }}
      - name: Build and push multiarch docker images
        env: 
          TAG_VERSION: ${{ env.JFROG_CLI_BUILD_NUMBER }}
          JFROG_CLI_BUILD_PROJECT: ${{ github.event.inputs.project-key }}
          RT_REPO_PREFIX: ${{ secrets['JF_HOST'] }}/${{ github.event.inputs.docker-repo }}
        uses: docker/build-push-action@v3
        id: docker_build_1
        with:
          context: ${{ github.event.inputs.app-choice }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          provenance: false
          outputs: |
            type=image
          tags: ${{ env.RT_REPO_PREFIX }}/iot-demo/website:${{ env.TAG_VERSION }}